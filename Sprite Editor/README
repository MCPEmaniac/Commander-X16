#Commander X16 Sprite Editor
Here's a snapshot and executable of a Commander X16 sprite editor which is built from "C" source files Iâ€™ve been developing that runs on the R32 version of the emulator.

The sprite editor is currently limited to 4 color bits per pixel using the standard color palette and sprite dimensions up to 32x32 pixels. I'm considering enhancements including support for 8 color bits per pixel, sprite dimensions up to 64x64 pixels, saving/loading sprites, rotation of sprites, undo/redo of changes to the sprite graphics data in VRAM, and load/edit/save of color palettes.

The sprite editor has a list command that outputs the sprite data along with a small BASIC program to the terminal (assuming the -echo option is used when starting the emulator). The BASIC program allows the sprite to be rendered and moved around a bit using the W/A/S/D keys.

I deferred support for saving/loading sprites because I'm under the impression the emulator currently doesn't support file I/O, but the BASIC program provides a near-term workaround. The sprite data exported in the BASIC program can be reloaded into the sprite editor via the following steps: 1) start the emulator; 2) paste the BASIC program into the emulator; 3) execute the RUN command; 4) push the Esc key to quit the running program; 5) execute the NEW command; 6) load the sprite editor; and 7) execute the RUN command. The sprite editor will then pick up the sprite that was loaded into the VERA sprite attribute registers and VRAM by the BASIC program.

V-flip and H-flip affect the display of the actual sprite but not the edit grid. The palette offset also only affects the display of the actual sprite (the edit grid colors and remainder of the screen colors are not affected). The fill command fills the entire sprite with the color at the current edit grid cursor position. The arrow keys are used to move the cursor around the sprite edit grid and 0-9/A-F are used to assign a color to the sprite bit corresponding to the current edit grid cursor position. The BG and FG options provide the ability to change the screen background color and the color of the text on the screen.

There's an anomaly associated with color 0 which is black in the standard color palette. Color 0 is shown as black on the screen and edit grid but is transparent when used in sprites, so the edit grid doesn't match the sprite with respect to color 0.

The BASIC program between line 10 and the DATA statements is constant. Line 10 varies with the height and width of the sprite and the DATA statements vary with the design of the sprite.

The SA7 value is based on the enumerated values of the height and width dimensions (0 for 8, 1 for 16, 2 for 32, and 3 for 64) and places these values into the proper position to be populated in the most significant nibble of the last sprite attribute register which has an offset of 7. The least significant nibble of this register is the palette offset which I assumed to be 0. I computed the SA7 value in my C program, but it could have been computed in the BASIC program since the enumerated values can be determined from the height and width which are exported on line 10 and palette offset is assumed to be 0.

I'm currently adding new capabilities including: ability to export the sprite graphics data in a format which is easier to import into a C program; ability to edit the first 16 entries of the color palette to enhance support for 4-bits per pixel sprite color mode; and support for 64x64 pixel sprites. I'll post an updated executable after I add support for 64x64 sprites.
